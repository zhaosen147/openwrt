Index: linux-5.4.52/drivers/clk/qcom/gcc-ipq8074.c
===================================================================
--- linux-5.4.52.orig/drivers/clk/qcom/gcc-ipq8074.c
+++ linux-5.4.52/drivers/clk/qcom/gcc-ipq8074.c
@@ -11,6 +11,7 @@
 #include <linux/of_device.h>
 #include <linux/clk-provider.h>
 #include <linux/regmap.h>
+#include <soc/qcom/socinfo.h>
 
 #include <dt-bindings/clock/qcom,gcc-ipq8074.h>
 
@@ -4736,7 +4737,6 @@ static const struct qcom_reset_map gcc_i
 	[GCC_PCIE0_AXI_SLAVE_ARES] = { 0x75040, 4 },
 	[GCC_PCIE0_AHB_ARES] = { 0x75040, 5 },
 	[GCC_PCIE0_AXI_MASTER_STICKY_ARES] = { 0x75040, 6 },
-	[GCC_PCIE0_AXI_SLAVE_STICKY_ARES] = { 0x75040, 7 },
 	[GCC_PCIE1_PIPE_ARES] = { 0x76040, 0 },
 	[GCC_PCIE1_SLEEP_ARES] = { 0x76040, 1 },
 	[GCC_PCIE1_CORE_STICKY_ARES] = { 0x76040, 2 },
@@ -4744,6 +4744,22 @@ static const struct qcom_reset_map gcc_i
 	[GCC_PCIE1_AXI_SLAVE_ARES] = { 0x76040, 4 },
 	[GCC_PCIE1_AHB_ARES] = { 0x76040, 5 },
 	[GCC_PCIE1_AXI_MASTER_STICKY_ARES] = { 0x76040, 6 },
+	[GCC_PCIE0_AXI_SLAVE_STICKY_ARES] = { 0x75040, 7 },
+	[GCC_PPE_FULL_RESET] = { 0x68014, 0, 0xf0000},
+	[GCC_UNIPHY0_SOFT_RESET] = { 0x56004, 0, 0x3ff2},
+	[GCC_UNIPHY0_XPCS_RESET] = { 0x56004, 2 },
+	[GCC_UNIPHY1_SOFT_RESET] = { 0x56104, 0, 0x32},
+	[GCC_UNIPHY1_XPCS_RESET] = { 0x56104, 2 },
+	[GCC_UNIPHY2_SOFT_RESET] = { 0x56204, 0, 0x32},
+	[GCC_UNIPHY2_XPCS_RESET] = { 0x56204, 2 },
+	[GCC_EDMA_HW_RESET] = { 0x68014, 0, 0x300000},
+	[GCC_NSSPORT1_RESET] = { 0x68014, 0, 0x1000003},
+	[GCC_NSSPORT2_RESET] = { 0x68014, 0, 0x200000c},
+	[GCC_NSSPORT3_RESET] = { 0x68014, 0, 0x4000030},
+	[GCC_NSSPORT4_RESET] = { 0x68014, 0, 0x8000300},
+	[GCC_NSSPORT5_RESET] = { 0x68014, 0, 0x10000c00},
+	[GCC_NSSPORT6_RESET] = { 0x68014, 0, 0x20003000},
+	[GCC_WCSSAON_RESET] = {0x18010, 0},
 };
 
 static const struct of_device_id gcc_ipq8074_match_table[] = {
@@ -4770,8 +4786,25 @@ static const struct qcom_cc_desc gcc_ipq
 	.num_clk_hws = ARRAY_SIZE(gcc_ipq8074_hws),
 };
 
+#define CLK_IS_ROOT             BIT(4)
+
 static int gcc_ipq8074_probe(struct platform_device *pdev)
 {
+	const int *soc_version_major;
+	struct device *dev = &pdev->dev;
+	soc_version_major = read_ipq_soc_version_major();
+	BUG_ON(!soc_version_major);
+
+	pr_info("Soc version %d\n", *soc_version_major);
+
+	if (*soc_version_major != 1) {
+		 clk_register_fixed_rate(dev, "pcie20_phy0_pipe_clk", NULL, CLK_IS_ROOT,
+                                      250000000);
+	} else {
+		 clk_register_fixed_rate(dev, "pcie20_phy0_pipe_clk", NULL, CLK_IS_ROOT,
+                                      125000000);
+	}
+
 	return qcom_cc_probe(pdev, &gcc_ipq8074_desc);
 }
 
Index: linux-5.4.52/include/dt-bindings/clock/qcom,gcc-ipq8074.h
===================================================================
--- linux-5.4.52.orig/include/dt-bindings/clock/qcom,gcc-ipq8074.h
+++ linux-5.4.52/include/dt-bindings/clock/qcom,gcc-ipq8074.h
@@ -230,6 +230,9 @@
 #define GCC_GP1_CLK				221
 #define GCC_GP2_CLK				222
 #define GCC_GP3_CLK				223
+#define GCC_PCIE0_AXI_S_BRIDGE_CLK      224
+#define GCC_PCIE0_RCHNG_CLK_SRC         225
+#define GCC_PCIE0_RCHNG_CLK             226
 
 #define GCC_BLSP1_BCR				0
 #define GCC_BLSP1_QUP1_BCR			1
@@ -363,8 +366,21 @@
 #define GCC_PCIE1_AHB_ARES			129
 #define GCC_PCIE1_AXI_MASTER_STICKY_ARES	130
 #define GCC_PCIE0_AXI_SLAVE_STICKY_ARES		131
-#define GCC_PCIE0_AXI_S_BRIDGE_CLK		132
-#define GCC_PCIE0_RCHNG_CLK_SRC			133
-#define GCC_PCIE0_RCHNG_CLK			134
+#define GCC_PCIE0_AXI_SLAVE_STICKY_ARES         131
+#define GCC_PPE_FULL_RESET                      132
+#define GCC_UNIPHY0_SOFT_RESET                  133
+#define GCC_UNIPHY0_XPCS_RESET                  134
+#define GCC_UNIPHY1_SOFT_RESET                  135
+#define GCC_UNIPHY1_XPCS_RESET                  136
+#define GCC_UNIPHY2_SOFT_RESET                  137
+#define GCC_UNIPHY2_XPCS_RESET                  138
+#define GCC_EDMA_HW_RESET                       139
+#define GCC_NSSPORT1_RESET                      140
+#define GCC_NSSPORT2_RESET                      141
+#define GCC_NSSPORT3_RESET                      142
+#define GCC_NSSPORT4_RESET                      143
+#define GCC_NSSPORT5_RESET                      144
+#define GCC_NSSPORT6_RESET                      145
+#define GCC_WCSSAON_RESET                       146
 
 #endif
Index: linux-5.4.52/drivers/clk/qcom/reset.c
===================================================================
--- linux-5.4.52.orig/drivers/clk/qcom/reset.c
+++ linux-5.4.52/drivers/clk/qcom/reset.c
@@ -29,6 +29,7 @@ qcom_reset_assert(struct reset_controlle
 	rst = to_qcom_reset_controller(rcdev);
 	map = &rst->reset_map[id];
 	mask = BIT(map->bit);
+	mask = map->bitmask ? map->bitmask : BIT(map->bit);
 
 	return regmap_update_bits(rst->regmap, map->reg, mask, mask);
 }
@@ -43,6 +44,7 @@ qcom_reset_deassert(struct reset_control
 	rst = to_qcom_reset_controller(rcdev);
 	map = &rst->reset_map[id];
 	mask = BIT(map->bit);
+	mask = map->bitmask ? map->bitmask : BIT(map->bit);
 
 	return regmap_update_bits(rst->regmap, map->reg, mask, 0);
 }
Index: linux-5.4.52/drivers/clk/qcom/reset.h
===================================================================
--- linux-5.4.52.orig/drivers/clk/qcom/reset.h
+++ linux-5.4.52/drivers/clk/qcom/reset.h
@@ -11,6 +11,7 @@
 struct qcom_reset_map {
 	unsigned int reg;
 	u8 bit;
+	u32 bitmask;
 };
 
 struct regmap;
